export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type Checklist = {
  __typename?: 'Checklist';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated input type of CreateDropzone */
export type CreateDropzoneInput = {
  attributes: DropzoneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateDropzone */
export type CreateDropzonePayload = {
  __typename?: 'CreateDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
};

/** Autogenerated input type of CreateExtra */
export type CreateExtraInput = {
  attributes: ExtraInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateExtra */
export type CreateExtraPayload = {
  __typename?: 'CreateExtraPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  extra?: Maybe<Extra>;
  fieldErrors?: Maybe<Array<FieldError>>;
};

/** Autogenerated input type of CreateLoad */
export type CreateLoadInput = {
  attributes: LoadInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateLoad */
export type CreateLoadPayload = {
  __typename?: 'CreateLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of CreatePlane */
export type CreatePlaneInput = {
  attributes: PlaneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreatePlane */
export type CreatePlanePayload = {
  __typename?: 'CreatePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of CreateRig */
export type CreateRigInput = {
  attributes: RigInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRig */
export type CreateRigPayload = {
  __typename?: 'CreateRigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  rig?: Maybe<Rig>;
};

/** Autogenerated input type of CreateSlot */
export type CreateSlotInput = {
  attributes: SlotInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSlot */
export type CreateSlotPayload = {
  __typename?: 'CreateSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of CreateTicket */
export type CreateTicketInput = {
  attributes: TicketTypeInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTicket */
export type CreateTicketPayload = {
  __typename?: 'CreateTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  ticketType?: Maybe<TicketType>;
};

export type Credential = {
  __typename?: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

/** Autogenerated input type of DeleteDropzone */
export type DeleteDropzoneInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteDropzone */
export type DeleteDropzonePayload = {
  __typename?: 'DeleteDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
};

/** Autogenerated input type of DeleteLoad */
export type DeleteLoadInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteLoad */
export type DeleteLoadPayload = {
  __typename?: 'DeleteLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of DeletePlane */
export type DeletePlaneInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeletePlane */
export type DeletePlanePayload = {
  __typename?: 'DeletePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of DeleteSlot */
export type DeleteSlotInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteSlot */
export type DeleteSlotPayload = {
  __typename?: 'DeleteSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of DeleteTicket */
export type DeleteTicketInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTicket */
export type DeleteTicketPayload = {
  __typename?: 'DeleteTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  ticketType?: Maybe<TicketType>;
};

export type Dropzone = {
  __typename?: 'Dropzone';
  banner?: Maybe<Scalars['String']>;
  bannerId?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Int'];
  currentUser: DropzoneUser;
  dropzoneUsers: DropzoneUserConnection;
  federation: Federation;
  id: Scalars['ID'];
  isCreditSystemEnabled: Scalars['Boolean'];
  isPublic: Scalars['Boolean'];
  loads: LoadConnection;
  name?: Maybe<Scalars['String']>;
  planes: Array<Plane>;
  primaryColor?: Maybe<Scalars['String']>;
  rigInspectionChecklist?: Maybe<Checklist>;
  secondaryColor?: Maybe<Scalars['String']>;
  ticketTypes: Array<TicketType>;
  updatedAt: Scalars['Int'];
  userRoles: Array<UserRole>;
};


export type DropzoneDropzoneUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  permissions?: Maybe<Array<Permission>>;
  search?: Maybe<Scalars['String']>;
};


export type DropzoneLoadsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  earliestTimestamp?: Maybe<Scalars['Int']>;
};

/** The connection type for Dropzone. */
export type DropzoneConnection = {
  __typename?: 'DropzoneConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DropzoneEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Dropzone>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DropzoneEdge = {
  __typename?: 'DropzoneEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Dropzone>;
};

export type DropzoneInput = {
  name: Scalars['String'];
  banner?: Maybe<Scalars['String']>;
  federationId: Scalars['Int'];
  isPublic?: Maybe<Scalars['Boolean']>;
  primaryColor?: Maybe<Scalars['String']>;
  secondaryColor?: Maybe<Scalars['String']>;
  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;
};

export type DropzoneUser = {
  __typename?: 'DropzoneUser';
  createdAt: Scalars['Int'];
  credits?: Maybe<Scalars['Int']>;
  expiresAt?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  permissions?: Maybe<Array<Permission>>;
  role?: Maybe<UserRole>;
  updatedAt: Scalars['Int'];
  user: User;
};

/** The connection type for DropzoneUser. */
export type DropzoneUserConnection = {
  __typename?: 'DropzoneUserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DropzoneUserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DropzoneUser>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DropzoneUserEdge = {
  __typename?: 'DropzoneUserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<DropzoneUser>;
};

export type Extra = {
  __typename?: 'Extra';
  cost: Scalars['Int'];
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  ticketTypes: Array<TicketType>;
  updatedAt: Scalars['Int'];
};

export type ExtraInput = {
  name?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  ticketTypeIds?: Maybe<Array<Scalars['Int']>>;
};

export type Federation = {
  __typename?: 'Federation';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type FieldError = {
  __typename?: 'FieldError';
  field: Scalars['String'];
  message: Scalars['String'];
};


export type JumpType = {
  __typename?: 'JumpType';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type License = {
  __typename?: 'License';
  createdAt: Scalars['Int'];
  federation?: Maybe<Federation>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type Load = {
  __typename?: 'Load';
  createdAt: Scalars['Int'];
  dispatchAt?: Maybe<Scalars['Int']>;
  gca?: Maybe<DropzoneUser>;
  hasLanded?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isFull: Scalars['Boolean'];
  isOpen: Scalars['Boolean'];
  isReady: Scalars['Boolean'];
  loadMaster?: Maybe<DropzoneUser>;
  maxSlots: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  pilot?: Maybe<DropzoneUser>;
  plane: Plane;
  slots?: Maybe<Array<Slot>>;
  updatedAt: Scalars['Int'];
};

/** The connection type for Load. */
export type LoadConnection = {
  __typename?: 'LoadConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LoadEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Load>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LoadEdge = {
  __typename?: 'LoadEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Load>;
};

export type LoadInput = {
  dispatchAt?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  maxSlots?: Maybe<Scalars['Int']>;
  isOpen?: Maybe<Scalars['Boolean']>;
  hasLanded?: Maybe<Scalars['Boolean']>;
  pilotId?: Maybe<Scalars['Int']>;
  planeId?: Maybe<Scalars['Int']>;
  gcaId?: Maybe<Scalars['Int']>;
  loadMasterId?: Maybe<Scalars['Int']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createDropzone?: Maybe<CreateDropzonePayload>;
  createExtra?: Maybe<CreateExtraPayload>;
  createLoad?: Maybe<CreateLoadPayload>;
  createPlane?: Maybe<CreatePlanePayload>;
  createRig?: Maybe<CreateRigPayload>;
  createSlot?: Maybe<CreateSlotPayload>;
  createTicketType?: Maybe<CreateTicketPayload>;
  deleteDropzone?: Maybe<DeleteDropzonePayload>;
  deleteLoad?: Maybe<DeleteLoadPayload>;
  deletePlane?: Maybe<DeletePlanePayload>;
  deleteSlot?: Maybe<DeleteSlotPayload>;
  deleteTicketType?: Maybe<DeleteTicketPayload>;
  updateDropzone?: Maybe<UpdateDropzonePayload>;
  updateExtra?: Maybe<UpdateExtraPayload>;
  updateLoad?: Maybe<UpdateLoadPayload>;
  updatePlane?: Maybe<UpdatePlanePayload>;
  updateRig?: Maybe<UpdateRigPayload>;
  updateSlot?: Maybe<UpdateSlotPayload>;
  updateTicketType?: Maybe<UpdateTicketPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
  userLogin?: Maybe<UserLoginPayload>;
  userLogout?: Maybe<UserLogoutPayload>;
  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;
  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;
  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;
  userSignUp?: Maybe<UserSignUpPayload>;
  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;
  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;
};


export type MutationCreateDropzoneArgs = {
  input: CreateDropzoneInput;
};


export type MutationCreateExtraArgs = {
  input: CreateExtraInput;
};


export type MutationCreateLoadArgs = {
  input: CreateLoadInput;
};


export type MutationCreatePlaneArgs = {
  input: CreatePlaneInput;
};


export type MutationCreateRigArgs = {
  input: CreateRigInput;
};


export type MutationCreateSlotArgs = {
  input: CreateSlotInput;
};


export type MutationCreateTicketTypeArgs = {
  input: CreateTicketInput;
};


export type MutationDeleteDropzoneArgs = {
  input: DeleteDropzoneInput;
};


export type MutationDeleteLoadArgs = {
  input: DeleteLoadInput;
};


export type MutationDeletePlaneArgs = {
  input: DeletePlaneInput;
};


export type MutationDeleteSlotArgs = {
  input: DeleteSlotInput;
};


export type MutationDeleteTicketTypeArgs = {
  input: DeleteTicketInput;
};


export type MutationUpdateDropzoneArgs = {
  input: UpdateDropzoneInput;
};


export type MutationUpdateExtraArgs = {
  input: UpdateExtraInput;
};


export type MutationUpdateLoadArgs = {
  input: UpdateLoadInput;
};


export type MutationUpdatePlaneArgs = {
  input: UpdatePlaneInput;
};


export type MutationUpdateRigArgs = {
  input: UpdateRigInput;
};


export type MutationUpdateSlotArgs = {
  input: UpdateSlotInput;
};


export type MutationUpdateTicketTypeArgs = {
  input: UpdateTicketInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUserResendConfirmationArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationUserSendPasswordResetArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationUserSignUpArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  confirmSuccessUrl?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
  exitWeight: Scalars['Float'];
  name: Scalars['String'];
  licenseId?: Maybe<Scalars['Int']>;
};


export type MutationUserUpdatePasswordArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  currentPassword?: Maybe<Scalars['String']>;
};


export type MutationUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export enum Permission {
  /** updateDropzone */
  UpdateDropzone = 'updateDropzone',
  /** deleteDropzone */
  DeleteDropzone = 'deleteDropzone',
  /** createLoad */
  CreateLoad = 'createLoad',
  /** updateLoad */
  UpdateLoad = 'updateLoad',
  /** deleteLoad */
  DeleteLoad = 'deleteLoad',
  /** readLoad */
  ReadLoad = 'readLoad',
  /** createSlot */
  CreateSlot = 'createSlot',
  /** updateSlot */
  UpdateSlot = 'updateSlot',
  /** deleteSlot */
  DeleteSlot = 'deleteSlot',
  /** createUserSlot */
  CreateUserSlot = 'createUserSlot',
  /** updateUserSlot */
  UpdateUserSlot = 'updateUserSlot',
  /** deleteUserSlot */
  DeleteUserSlot = 'deleteUserSlot',
  /** createStudentSlot */
  CreateStudentSlot = 'createStudentSlot',
  /** updateStudentSlot */
  UpdateStudentSlot = 'updateStudentSlot',
  /** deleteStudentSlot */
  DeleteStudentSlot = 'deleteStudentSlot',
  /** createTicketType */
  CreateTicketType = 'createTicketType',
  /** updateTicketType */
  UpdateTicketType = 'updateTicketType',
  /** deleteTicketType */
  DeleteTicketType = 'deleteTicketType',
  /** createExtra */
  CreateExtra = 'createExtra',
  /** updateExtra */
  UpdateExtra = 'updateExtra',
  /** deleteExtra */
  DeleteExtra = 'deleteExtra',
  /** readExtra */
  ReadExtra = 'readExtra',
  /** createPlane */
  CreatePlane = 'createPlane',
  /** updatePlane */
  UpdatePlane = 'updatePlane',
  /** deletePlane */
  DeletePlane = 'deletePlane',
  /** createRig */
  CreateRig = 'createRig',
  /** updateRig */
  UpdateRig = 'updateRig',
  /** deleteRig */
  DeleteRig = 'deleteRig',
  /** readRig */
  ReadRig = 'readRig',
  /** createDropzoneRig */
  CreateDropzoneRig = 'createDropzoneRig',
  /** updateDropzoneRig */
  UpdateDropzoneRig = 'updateDropzoneRig',
  /** deleteDropzoneRig */
  DeleteDropzoneRig = 'deleteDropzoneRig',
  /** readPermissions */
  ReadPermissions = 'readPermissions',
  /** updatePermissions */
  UpdatePermissions = 'updatePermissions',
  /** createPackjob */
  CreatePackjob = 'createPackjob',
  /** updatePackjob */
  UpdatePackjob = 'updatePackjob',
  /** deletePackjob */
  DeletePackjob = 'deletePackjob',
  /** readPackjob */
  ReadPackjob = 'readPackjob',
  /** createChecklist */
  CreateChecklist = 'createChecklist',
  /** updateChecklist */
  UpdateChecklist = 'updateChecklist',
  /** deleteChecklist */
  DeleteChecklist = 'deleteChecklist',
  /** readChecklist */
  ReadChecklist = 'readChecklist',
  /** readUser */
  ReadUser = 'readUser',
  /** updateUser */
  UpdateUser = 'updateUser',
  /** deleteUser */
  DeleteUser = 'deleteUser',
  /** createUser */
  CreateUser = 'createUser',
  /** actAsPilot */
  ActAsPilot = 'actAsPilot',
  /** actAsLoadMaster */
  ActAsLoadMaster = 'actAsLoadMaster',
  /** actAsGCA */
  ActAsGca = 'actAsGCA',
  /** actAsDZSO */
  ActAsDzso = 'actAsDZSO'
}

export type Plane = {
  __typename?: 'Plane';
  createdAt: Scalars['Int'];
  dropzone: Dropzone;
  hours?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  maxSlots?: Maybe<Scalars['Int']>;
  minSlots?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nextMaintenanceHours?: Maybe<Scalars['Int']>;
  registration?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type PlaneInput = {
  name?: Maybe<Scalars['String']>;
  minSlots?: Maybe<Scalars['Int']>;
  maxSlots?: Maybe<Scalars['Int']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  hours?: Maybe<Scalars['Int']>;
  nextMaintenanceHours?: Maybe<Scalars['Int']>;
  registration?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  /** Get dropzone details */
  dropzone: Dropzone;
  /** Get all available dropzones */
  dropzones: DropzoneConnection;
  /** Get ticket addons for a dropzone */
  extras: Array<Extra>;
  /** Available federations */
  federations: Array<Federation>;
  /** Load base64 images as graphql */
  image?: Maybe<Scalars['String']>;
  /** Get all jump types */
  jumpTypes: Array<JumpType>;
  /** Get all licenses for a federation */
  licenses: Array<License>;
  /** Get load by id */
  load: Load;
  /** Get loads */
  loads: LoadConnection;
  /** Get planes from a dropzone */
  planes: Array<Plane>;
  /** Get rigs for user or dropzone */
  rigs?: Maybe<Array<Rig>>;
  /** Get ticket types for a dropzone */
  ticketTypes: Array<TicketType>;
  userCheckPasswordToken: User;
  userConfirmAccount: User;
};


export type QueryDropzoneArgs = {
  id: Scalars['Int'];
};


export type QueryDropzonesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryExtrasArgs = {
  dropzoneId: Scalars['Int'];
};


export type QueryImageArgs = {
  id: Scalars['Int'];
};


export type QueryJumpTypesArgs = {
  allowedForUserId?: Maybe<Scalars['Int']>;
};


export type QueryLicensesArgs = {
  federationId?: Maybe<Scalars['Int']>;
};


export type QueryLoadArgs = {
  id: Scalars['Int'];
};


export type QueryLoadsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  dropzoneId: Scalars['Int'];
  earliestTimestamp?: Maybe<Scalars['Int']>;
};


export type QueryPlanesArgs = {
  dropzoneId: Scalars['Int'];
};


export type QueryRigsArgs = {
  userId?: Maybe<Scalars['Int']>;
  dropzoneId?: Maybe<Scalars['Int']>;
};


export type QueryTicketTypesArgs = {
  dropzoneId: Scalars['Int'];
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
};


export type QueryUserCheckPasswordTokenArgs = {
  resetPasswordToken: Scalars['String'];
  redirectUrl?: Maybe<Scalars['String']>;
};


export type QueryUserConfirmAccountArgs = {
  confirmationToken: Scalars['String'];
  redirectUrl: Scalars['String'];
};

export type Rig = {
  __typename?: 'Rig';
  canopySize?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Int'];
  dropzone?: Maybe<Dropzone>;
  id: Scalars['ID'];
  maintainedAt?: Maybe<Scalars['Int']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  packValue?: Maybe<Scalars['Int']>;
  repackExpiresAt?: Maybe<Scalars['Int']>;
  serial?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
};

export type RigInput = {
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  packValue?: Maybe<Scalars['Int']>;
  repackExpiresAt?: Maybe<Scalars['Int']>;
  maintainedAt?: Maybe<Scalars['Int']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  canopySize?: Maybe<Scalars['Int']>;
};

export type Slot = {
  __typename?: 'Slot';
  createdAt: Scalars['Int'];
  exitWeight: Scalars['Float'];
  extras?: Maybe<Array<Extra>>;
  id: Scalars['ID'];
  jumpType?: Maybe<JumpType>;
  load: Load;
  rig?: Maybe<Rig>;
  ticketType?: Maybe<TicketType>;
  user?: Maybe<User>;
  wingLoading?: Maybe<Scalars['Float']>;
};

export type SlotInput = {
  userId?: Maybe<Scalars['Int']>;
  ticketTypeId?: Maybe<Scalars['Int']>;
  loadId?: Maybe<Scalars['Int']>;
  rigId?: Maybe<Scalars['Int']>;
  jumpTypeId?: Maybe<Scalars['Int']>;
  exitWeight?: Maybe<Scalars['Float']>;
  extraIds?: Maybe<Array<Scalars['Int']>>;
};

export type TicketType = {
  __typename?: 'TicketType';
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
  altitude?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  extras: Array<Extra>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type TicketTypeInput = {
  currency?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  altitude?: Maybe<Scalars['Int']>;
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  extraIds?: Maybe<Array<Scalars['Int']>>;
};

/** Autogenerated input type of UpdateDropzone */
export type UpdateDropzoneInput = {
  id: Scalars['Int'];
  attributes: DropzoneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDropzone */
export type UpdateDropzonePayload = {
  __typename?: 'UpdateDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
};

/** Autogenerated input type of UpdateExtra */
export type UpdateExtraInput = {
  attributes: ExtraInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateExtra */
export type UpdateExtraPayload = {
  __typename?: 'UpdateExtraPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  extra?: Maybe<Extra>;
  fieldErrors?: Maybe<Array<FieldError>>;
};

/** Autogenerated input type of UpdateLoad */
export type UpdateLoadInput = {
  id: Scalars['Int'];
  attributes: LoadInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateLoad */
export type UpdateLoadPayload = {
  __typename?: 'UpdateLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of UpdatePlane */
export type UpdatePlaneInput = {
  id: Scalars['Int'];
  attributes: PlaneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePlane */
export type UpdatePlanePayload = {
  __typename?: 'UpdatePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of UpdateRig */
export type UpdateRigInput = {
  attributes: RigInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRig */
export type UpdateRigPayload = {
  __typename?: 'UpdateRigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  rig?: Maybe<Rig>;
};

/** Autogenerated input type of UpdateSlot */
export type UpdateSlotInput = {
  id: Scalars['Int'];
  attributes: SlotInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSlot */
export type UpdateSlotPayload = {
  __typename?: 'UpdateSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of UpdateTicket */
export type UpdateTicketInput = {
  id: Scalars['Int'];
  attributes: TicketTypeInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTicket */
export type UpdateTicketPayload = {
  __typename?: 'UpdateTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  ticketType?: Maybe<TicketType>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  attributes: UserInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
  user?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['Int'];
  dropzoneUsers?: Maybe<Array<DropzoneUser>>;
  email?: Maybe<Scalars['String']>;
  exitWeight?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  jumpTypes?: Maybe<Array<JumpType>>;
  license?: Maybe<License>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  rigs?: Maybe<Array<Rig>>;
  updatedAt: Scalars['Int'];
};

export type UserInput = {
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  licenseId?: Maybe<Scalars['Int']>;
  exitWeight?: Maybe<Scalars['Float']>;
};

/** Autogenerated return type of UserLogin */
export type UserLoginPayload = {
  __typename?: 'UserLoginPayload';
  authenticatable: User;
  credentials: Credential;
};

/** Autogenerated return type of UserLogout */
export type UserLogoutPayload = {
  __typename?: 'UserLogoutPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserResendConfirmation */
export type UserResendConfirmationPayload = {
  __typename?: 'UserResendConfirmationPayload';
  message: Scalars['String'];
};

export type UserRole = {
  __typename?: 'UserRole';
  createdAt: Scalars['Int'];
  dropzone: Dropzone;
  dropzoneId: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  permissions: Array<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

/** Autogenerated return type of UserSendPasswordReset */
export type UserSendPasswordResetPayload = {
  __typename?: 'UserSendPasswordResetPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserSendPasswordResetWithToken */
export type UserSendPasswordResetWithTokenPayload = {
  __typename?: 'UserSendPasswordResetWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserSignUp */
export type UserSignUpPayload = {
  __typename?: 'UserSignUpPayload';
  authenticatable?: Maybe<User>;
  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */
  credentials?: Maybe<Credential>;
  errors?: Maybe<Array<Scalars['String']>>;
  fieldErrors?: Maybe<Array<FieldError>>;
};

/** Autogenerated return type of UserUpdatePassword */
export type UserUpdatePasswordPayload = {
  __typename?: 'UserUpdatePasswordPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserUpdatePasswordWithToken */
export type UserUpdatePasswordWithTokenPayload = {
  __typename?: 'UserUpdatePasswordWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials?: Maybe<Credential>;
};
